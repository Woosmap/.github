name: Check Open API schema changes
description: This is checking open Api specification generated by PR and one with already published on develop-api.woosmap.com

runs:
  using: 'composite'

  steps:
    - name: Verify product name
      id: set_product
      shell: bash
      run: |
        case "$GITHUB_REPOSITORY" in
          Woosmap/map)
            product="map"
            ;;
          Woosmap/indoor)
            product="indoor"
            ;;
          Woosmap/datasets)
            product="datasets"
            ;;
          Woosmap/distance)
            product="distance"
            ;;
          Woosmap/external-api-wrapper)
            product="traffic,what3words"
            ;;
          Woosmap/geolocation)
            product="geolocation"
            ;;
          *)
            echo "Unknown repository: $GITHUB_REPOSITORY"
            exit 1
            ;;
        esac

        echo "product=$product" >> $GITHUB_OUTPUT

    - name: Download develop-api.woosmap and PR version to comparison
      id: check_update
      shell: bash
      run: |
        set -e
        echo "status=false" >> $GITHUB_OUTPUT

        if [ -z "$PR_NUMBER" ]; then
          echo "PR_NUMBER is empty"
          exit 0
        else
          # Split the string into an array
          IFS=',' read -ra items <<< "${{ steps.set_product.outputs.product }}"

          # Loop through the array
          for item in "${items[@]}"; do
            echo "Fetching dev schema..."
            DEV_URL="https://develop-api.woosmap.com/$item/openapi.json"
            DEV_RESPONSE=$(curl -s -w "HTTPSTATUS:%{http_code}" "$DEV_URL")
            DEV_BODY=$(echo "$DEV_RESPONSE" | sed -e 's/HTTPSTATUS\:.*//g')
            DEV_STATUS=$(echo "$DEV_RESPONSE" | tr -d '\n' | sed -e 's/.*HTTPSTATUS://')

            if [ "$DEV_STATUS" -ne 200 ]; then
              echo "❌ Failed to fetch dev schema. HTTP Status: $DEV_STATUS"
              exit 1
            fi
            echo "$DEV_BODY" | jq 'del(.info)' > dev_schema.json

            echo "Fetching PR schema..."
            PR_URL="https://develop-api.woosmap.com/$PR_NUMBER/$item/openapi.json"
            PR_RESPONSE=$(curl -s -w "HTTPSTATUS:%{http_code}" "$PR_URL")
            PR_BODY=$(echo "$PR_RESPONSE" | sed -e 's/HTTPSTATUS\:.*//g')
            PR_STATUS=$(echo "$PR_RESPONSE" | tr -d '\n' | sed -e 's/.*HTTPSTATUS://')

            if [ "$PR_STATUS" -ne 200 ]; then
              echo "❌ Failed to fetch PR schema. HTTP Status: $PR_STATUS"
              exit 1
            fi
            echo "$PR_BODY" | jq 'del(.info) | walk(if type == "object" then with_entries(.key |= gsub("/$$PR_NUMBER/"; "/")) else . end)' > latest_schema.json

            if diff dev_schema.json latest_schema.json > /dev/null; then
                echo "Files are the same"
            else
                echo "Files are different"
                echo "status=true" >> $GITHUB_OUTPUT
            fi
          done
        fi
        
        
    - name: Create issue in Woosmap/woosmap if schemas changed
      if: steps.check_update.outputs.status == 'true' && env.WOOSMAP_NEW_ISSUE_ACCESS_TOKEN != ''
      uses: actions/github-script@v6
      with:
          github-token: ${{ env.WOOSMAP_NEW_ISSUE_ACCESS_TOKEN }}
          script: |
            // 0) Grab the PR payload
            const pr_number = ${{ env.PR_NUMBER }};
            const publicOwner = context.repo.owner;
            const publicRepo  = context.repo.repo;
            
            // 0.1) grab PR details
            PR_JSON=$(curl -s \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github+json" \
            https://api.github.com/repos/${{ github.repository }}/pulls/${pr_number})

            
            const pr_title   = $(echo "$PR_JSON" | jq -r '.title')
            const pr_author  = $(echo "$PR_JSON" | jq -r '.user.login')
            const pr_url     = $(echo "$PR_JSON" | jq -r '.html_url')

            // 1) Prepare private target repo
            const targetOwner = 'Woosmap';
            const targetRepo  = 'woosmap';
            const issueTitle  = `${{ steps.set_product.outputs.product }} OpenAPI change: #${pr_number} - ${pr_title}`;
            const author      = pr_author;

            // 2) Dedup via listForRepo on the private repo
            const { data: openIssues } = await github.rest.issues.listForRepo({
              owner: targetOwner,
              repo:  targetRepo,
              state: 'open',
              per_page: 10
            });
            if (openIssues.some(i => i.title === issueTitle)) {
              console.log(`Issue "${issueTitle}" already exists; skipping creation.`);
              return;
            }

            // 3) Fetch diff from the PUBLIC repo where this PR lives
            let diffText = '';
            try {
              const diffRes = await github.request(
                'GET /repos/{owner}/{repo}/pulls/{pull_number}',
                {
                  owner: publicOwner,
                  repo:  publicRepo,
                  pull_number: pr,
                  mediaType: { format: 'diff' }
                }
              );
              diffText = diffRes.data;
            } catch (err) {
              console.warn('Unable to fetch PR diff:', err.message);
            }

            // 4) Truncate or embed the diff
            let diffBlock = '';
            if (diffText) {
              const MAX_FULL = 2000;
              const MAX_SNIP = 500;
              if (diffText.length <= MAX_FULL) {
                diffBlock = '```diff\n' + diffText + '\n```';
              } else {
                const snippet = diffText.slice(0, MAX_SNIP) + '\n...';
                diffBlock = '```diff\n' + snippet + '\n```';
              }
            }

            // 5) Build the issue body with a checklist
            const bodyLines = [
              `Open API Schema file were updated in PR ${pr_url}.`,
              '',
              `> ${pr_title}`,
              '',
              diffBlock,
              '',
              '**Please update these dependent libraries/SDKs/Plugins:**',
              '- [ ] MapsJS',
              '- [ ] Native SDK',
              '- [ ] RN Plugin',
              '- [ ] Flutter Plugin'
            ].filter(Boolean);


            // 6) Create the issue in the PRIVATE repo, assigned to the PR author
            await github.rest.issues.create({
              owner:      targetOwner,
              repo:       targetRepo,
              title:      issueTitle,
              body:       bodyLines.join('\n'),
              assignees:  [author]
            });

    - name: Send Slack notification if schemas changed
      if: steps.check_update.outputs.status == 'true' && env.WOOSMAP_SLACK_WEBHOOK != ''
      uses: slackapi/slack-github-action@v1
      with:
        payload: |
          {
            "channel": "#${{ env.WOOSMAP_SLACK_CHANNEL }}",
            "text": "🚨 OpenAPI schema has changed. Please refer to the PR <https://github.com/${{ github.repository }}/pull/${{ env.PR_NUMBER }}|#${{ env.PR_NUMBER }}> for more insights."
          }
      env:
        SLACK_WEBHOOK_URL: ${{ env.WOOSMAP_SLACK_WEBHOOK }}
    
