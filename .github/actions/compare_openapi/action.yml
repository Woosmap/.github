name: Check Open API schema changes
description: This is checking open Api specification generated by PR and one with already published on develop-api.woosmap.com

runs:
  using: 'composite'

  steps:
    - name: Verify product name
      id: set_product
      shell: bash
      run: |
        case "$GITHUB_REPOSITORY" in
          Woosmap/maps)
            product="maps"
            ;;
          Woosmap/indoor)
            product="indoor"
            ;;
          Woosmap/datasets)
            product="datasets"
            ;;
          Woosmap/distance)
            product="distance"
            ;;
          Woosmap/external-api-wrapper)
            product="transit,what3words"
            ;;
          Woosmap/geolocation)
            product="geolocation"
            ;;
          *)
            echo "Unknown repository: $GITHUB_REPOSITORY"
            exit 1
            ;;
        esac

        echo "product=$product" >> $GITHUB_OUTPUT

    - name: Download develop-api.woosmap and PR version to comparison
      id: check_update
      shell: bash
      run: |
        set -e
        echo "status=false" >> $GITHUB_OUTPUT
        if [ -z "$PR_NUMBER" ]; then
          echo "PR_NUMBER is empty"
          exit 0
        else
          # Split the string into an array
          IFS=',' read -ra items <<< "${{ steps.set_product.outputs.product }}"

          # Loop through the array
          for item in "${items[@]}"; do
            echo "Fetching dev schema..."
            DEV_URL="https://develop-api.woosmap.com/$item/openapi.json"
            DEV_RESPONSE=$(curl -s -w "HTTPSTATUS:%{http_code}" "$DEV_URL")
            DEV_BODY=$(echo "$DEV_RESPONSE" | sed -e 's/HTTPSTATUS\:.*//g')
            DEV_STATUS=$(echo "$DEV_RESPONSE" | tr -d '\n' | sed -e 's/.*HTTPSTATUS://')

            if [ "$DEV_STATUS" -ne 200 ]; then
              echo "‚ùå Failed to fetch dev schema. HTTP Status: $DEV_STATUS"
              exit 1
            fi
            echo "$DEV_BODY" | jq 'del(.info)' > dev_schema.json

            echo "Fetching PR schema..."
            PR_URL="https://develop-api.woosmap.com/$PR_NUMBER/$item/openapi.json"
            PR_RESPONSE=$(curl -s -w "HTTPSTATUS:%{http_code}" "$PR_URL")
            PR_BODY=$(echo "$PR_RESPONSE" | sed -e 's/HTTPSTATUS\:.*//g')
            PR_STATUS=$(echo "$PR_RESPONSE" | tr -d '\n' | sed -e 's/.*HTTPSTATUS://')

            if [ "$PR_STATUS" -ne 200 ]; then
              echo "‚ùå Failed to fetch PR schema. HTTP Status: $PR_STATUS"
              exit 1
            fi
            echo "$PR_BODY" | jq 'del(.info) | del(.servers) | walk(if type == "object" then with_entries(.key |= gsub("/$$PR_NUMBER/"; "/")) else . end)' > latest_schema.json

            if diff dev_schema.json latest_schema.json > diff_output.txt; then
                echo "Files are the same"
            else
                echo "Files are different"
                cat diff_output.txt
                rm diff_output.txt
                echo "status=true" >> $GITHUB_OUTPUT
            fi
            rm dev_schema.json
            rm latest_schema.json
          done
        fi
    
    - name: Check if "openapi-changed" label exists on PR
      uses: actions/github-script@v6
      id: check_label
      with:
        github-token: ${{ env.GITHUB_TOKEN }} 
        script: |
          const prNumber = context.payload.pull_request?.number || context.issue.number;
          const labelToCheck = "openapi-changed"; 

          const { data: labels } = await github.rest.issues.listLabelsOnIssue({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: prNumber,
          });

          const found = labels.some(label => label.name === labelToCheck);
          core.setOutput("label_exists", found);

    - name: Add label to PR
      if: steps.check_label.outputs.label_exists != 'true' && steps.check_update.outputs.status == 'true'
      uses: actions/github-script@v6
      with:
        github-token: ${{ env.GITHUB_TOKEN }}
        script: |
          github.rest.issues.addLabels({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.payload.pull_request.number,
            labels: ['openapi-changed']
          });

    - name: Remove label from PR
      uses: actions/github-script@v6
      if: steps.check_label.outputs.label_exists == 'true' && steps.check_update.outputs.status != 'true'
      with:
        github-token: ${{ env.GITHUB_TOKEN }}
        script: |
          const prNumber = context.payload.pull_request?.number || context.issue.number;
          await github.rest.issues.removeLabel({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: prNumber,
            name: "openapi-changed"  // üîÅ label to remove
          });
